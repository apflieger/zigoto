/*!
* Ce fichier est un fork de knacss/grillade
* www.KNACSS.com V4.4.4 (23 janvier 2016) @author: Raphael Goetter, Alsacreations
* Licence WTFPL http://www.wtfpl.net/
*/

// breakpoints (choose unit you prefer)
@tiny-screen            : 320px; // tiny screens media query (less-equal than 320px)
@tiny-plus-screen       : 480px; // screens between 321px and 480px
@small-screen           : 640px; // screens between 481px and 640px
@small-plus-screen      : 768px; // screens between 641px and 768px
@medium-screen          : 960px; // screens between 769px and 960px
@medium-plus-screen     : 1024px; // screens between 961px and 1024px
@large-screen           : 1280px; // screens between 1025px and 1280px
@large-plus-screen      : 1440px; // screens between 1281px and 1440px
@extra-large-screen     : 1600px; // screens between 1441px and 1600px
@ultra-large-screen     : 1920px; // ultra large screens

/* ---------------------------------- */
/* ==Grillade                         */
/* ---------------------------------- */

// Tuto : http://www.alsacreations.com/tuto/lire/1659-une-grille-responsive-avec-flexbox-et-LESS.html
// Demo : http://codepen.io/raphaelgoetter/pen/zxBMLW

// Usage in vanilla CSS:
// - <div class="grid-4"> for an equal fourth columns grid container
// - <div class="grid-2-1"> for an uneven columns grid container

// Usage with preprocessors : if you're using LESS, you can config grids variables :
// n = number of columns (default = 4)
// example : .grid-perso { .grid(12); }
// ... or uneven grids :
// left = left ratio column (default = 2) / right = right ratio column (default = 1)
// example : .grid-perso { .uneven-grid(2, 1); }

/* grid container */
[class*="grid-"] {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;

    /* inline-block fallback for IE9 generation */
    letter-spacing: -0.31em;
}

/* grid childs */
[class*="grid-"] > * {
    box-sizing: border-box;
    flex: 0 0 auto;
    width: ~'calc(100% * 1 / 4 - .01px)';
    min-width: 0;

    /* inline-block fallback for IE9 generation */
    display: inline-block;
    vertical-align: top;
    letter-spacing: normal;
}

// LESS mixins for *equal* columns grid container
// example : .grid-perso { .grid(12); }
.grid(@number) {
    & > * {
        width: ~'calc(100% * 1 / @{number} - .01px)';
    }
    & > .flex-item-double {
        width: ~'calc(100% * 2 / @{number} - .01px)';
    }
}

// Examples : will be compiled in CSS
[class*="grid-2"] {
    .grid(2);
}
[class*="grid-3"] {
    .grid(3);
}
[class*="grid-4"] {
    .grid(4);
}
[class*="grid-5"] {
    .grid(5);
}
[class*="grid-6"] {
    .grid(6);
}
[class*="grid-7"] {
    .grid(7);
}
[class*="grid-8"] {
    .grid(8);
}
[class*="grid-10"] {
    .grid(10);
}
[class*="grid-12"] {
    .grid(12);
}

/* Responsive grid */
// "small-2" = 2 columns when small screen
// example : .grid-4-small-2 will be 4 then 2 columns
@media (max-width: @small-screen) {
    [class*="-small-4"] > * {
        width: ~'calc(100% * 1 / 4 - .01px)';
    }
    [class*="-small-4"] > .flex-item-double {
        width: ~'calc(100% * 1 / 2 - .01px)';
    }
    [class*="-small-3"] > * {
        width: ~'calc(100% * 1 / 3 - .01px)';
    }
    [class*="-small-3"] > .flex-item-double {
        width: ~'calc(100% * 2 / 3 - .01px)';
    }
    [class*="-small-2"] > * {
        width: ~'calc(100% * 1 / 2 - .01px)';
    }
    [class*="-small-2"] > .flex-item-double {
        width: ~'calc(100% - .01px)';
    }
    [class*="-small-1"] > * {
        width: ~'calc(100% - .01px)';
    }
    [class*="-small-1"] > .flex-item-double {
        width: ~'calc(100% - .01px)';
    }
}
// "tiny-1" = 1 column when tiny screen
// example : .grid-4-small-2-tiny-1 will be 4 then 2 columns then 1 column
@media (max-width: @tiny-screen) {
    [class*="-tiny-2"] > * {
        width: ~'calc(100% * 1 / 2 - .01px)';
    }
    [class*="-tiny-2"] > .flex-item-double {
        width: ~'calc(100% - .01px)';
    }
    [class*="-tiny-1"] > * {
        width: ~'calc(100% - .01px)';
    }
    [class*="-tiny-1"] > .flex-item-double {
        width: ~'calc(100% - .01px)';
    }
}

// LESS mixins for *unequal* columns grid container
// example : .grid-perso { .uneven-grid(2, 1); }
.uneven-grid(@left:@left, @right:@right) {
    & > *:nth-child(odd) {
        @size: (@left / (@left + @right)) * 100%;
        width: ~'calc(@{size} - .01px)';
    }
    & > *:nth-child(even) {
        @size: (@right / (@left + @right)) * 100%;
        width: ~'calc(@{size} - .01px)';
    }
    @media (max-width: @small-screen) {
        & > *:nth-child(n) {
            width: ~'calc(100% - .01px)';
        }
    }
}

// Examples : will be compiled in CSS
.grid-2-1 {
    .uneven-grid(2,1);
}
.grid-1-2 {
    .uneven-grid(1,2);
}
.grid-3-1 {
    .uneven-grid(3,1);
}
.grid-1-3 {
    .uneven-grid(1,3);
}
.grid-3-2 {
    .uneven-grid(3,2);
}
.grid-2-3 {
    .uneven-grid(2,3);
}
.grid-4-1 {
    .uneven-grid(4,1);
}
.grid-1-4 {
    .uneven-grid(1,4);
}

.pull {
    margin-right: auto;
}
.push {
    margin-left: auto;
}
.middle {
    margin-left: auto;
    margin-right: auto;
}
